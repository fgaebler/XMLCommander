<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <SolidColorBrush x:Key="TestBrush" Color="#FFFF00F3" />
    <SolidColorBrush x:Key="DialogMainBrush" Color="#FF2D2D30" />
    <SolidColorBrush x:Key="DialogMouseOverBrush" Color="#FF3F3F46" />
    <SolidColorBrush x:Key="ButtonPressedBrush" Color="#FF007ACC" />
    <SolidColorBrush x:Key="MenuBrush" Color="#FF111111" />
    <SolidColorBrush x:Key="MenuTextBrush" Color="White" />
    <SolidColorBrush x:Key="MenuSeparatorBrush" Color="#FF3E3E42" />

    <ImageBrush x:Key="CloseImageBrush" ImageSource="./close.png"/>
    <ImageBrush x:Key="CloseMouseOverImageBrush" ImageSource="./close_mouseover.png"/>
    <ImageBrush x:Key="ClosePressedImageBrush" ImageSource="./close_pressed.png"/>

    <ImageBrush x:Key="MaximizeImageBrush" ImageSource="./Maximize.png"/>
    <ImageBrush x:Key="MaximizeMouseOverImageBrush" ImageSource="./Maximize_mouseover.png"/>
    <ImageBrush x:Key="MaximizePressedImageBrush" ImageSource="./Maximize_pressed.png"/>

    <ImageBrush x:Key="NormalSizeImageBrush" ImageSource="./NormalSize.png"/>
    <ImageBrush x:Key="NormalSizeMouseOverImageBrush" ImageSource="./NormalSize_mouseover.png"/>
    <ImageBrush x:Key="NormalSizePressedImageBrush" ImageSource="./NormalSize_pressed.png"/>

    <ImageBrush x:Key="MinimizeImageBrush" ImageSource="./minimize.png"/>
    <ImageBrush x:Key="MinimizeMouseOverImageBrush" ImageSource="./minimize_mouseover.png"/>
    <ImageBrush x:Key="MinimizePressedImageBrush" ImageSource="./minimize_pressed.png"/>


    <LinearGradientBrush x:Key="GrayBlueGradientBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#FF2D2D30" Offset="0" />
        <GradientStop Color="#FF007ACC" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
            Margin="2"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="White" Offset="0" />
        <GradientStop Color="#FF873C3C" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
    
    <Style x:Key="newBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="Black" />
    </Style>

    <Style x:Key="MyCloseButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle x:Name="rect" Fill="{DynamicResource CloseImageBrush}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource CloseMouseOverImageBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource ClosePressedImageBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMaximizeButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle x:Name="rect" Fill="{DynamicResource MaximizeImageBrush}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource MaximizeMouseOverImageBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource MaximizePressedImageBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNormalSizeButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle x:Name="rect" Fill="{DynamicResource NormalSizeImageBrush}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource NormalSizeMouseOverImageBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource NormalSizePressedImageBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMinimizeButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle x:Name="rect" Fill="{DynamicResource MinimizeImageBrush}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource MinimizeMouseOverImageBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rect" Value="{DynamicResource MinimizePressedImageBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyButtonStyle" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="24"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="{StaticResource DialogMainBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    <!--<Border x:Name="Border" BorderThickness="0" Background="{StaticResource DialogMainBrush}">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource DialogMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource ButtonPressedBrush}" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DialogMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonPressedBrush}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMenuStyle" TargetType="Menu">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinWidth"  Value="50"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Border x:Name="Border" BorderThickness="0" Background="{StaticResource DialogMainBrush}">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DialogMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMenuMainItemStyle" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Rectangle x:Name="Bg" Fill="{StaticResource DialogMainBrush}"/>
                        <DockPanel>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <Path x:Name="GlyphPanel" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                            <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource MenuBrush}" BorderThickness="2" Background="WhiteSmoke">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Margin="0,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{DynamicResource MenuBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <Rectangle Fill="{DynamicResource MenuBrush}" HorizontalAlignment="Left" Margin="1,2" RadiusY="2" RadiusX="2" Width="28"/>
                                            <Rectangle Fill="{DynamicResource MenuBrush}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                            <Rectangle Fill="{DynamicResource MenuBrush}" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource DialogMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <!--<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>-->
                            <!--<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
                                <Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>-->
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <!--<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>-->
                            <Setter Property="Fill" TargetName="Bg">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#28717070" Offset="0"/>
                                        <GradientStop Color="#50717070" Offset="0.75"/>
                                        <GradientStop Color="#90717070" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <!--<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>-->
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <!--<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>-->
                            <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource MenuBrush}">
                                <!--<Setter.Value>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#28717070" Offset="0"/>
                                            <GradientStop Color="#50717070" Offset="0.75"/>
                                            <GradientStop Color="#90717070" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>-->
                            </Setter>
                            <!--<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF9A9A9A"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF848589"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMenuItemStyle" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="2,2,2,0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <Rectangle x:Name="Bg" Fill="{DynamicResource MenuBrush}" UseLayoutRounding="True"/>
                        <!--<Rectangle x:Name="Bg" Fill="{StaticResource DialogMainBrush}" Stroke="{StaticResource DialogMainBrush}" StrokeThickness="1" UseLayoutRounding="True"/>-->
                        <!--<Rectangle x:Name="InnerBorder" Margin="1" UseLayoutRounding="True"/>-->
                        <Grid UseLayoutRounding="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="4"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="37"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="17"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="True" VerticalAlignment="Center"/>
                            <!--<Border x:Name="GlyphPanel" BorderBrush="#FFCDD3E6" BorderThickness="1" Background="#FFE6EFF4" Height="22" Margin="1" UseLayoutRounding="True" Visibility="Hidden" Width="22">
                                    <Path x:Name="Glyph" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="#FF0C12A1" FlowDirection="LeftToRight" Height="11" UseLayoutRounding="True" Width="9"/>
                                </Border>-->
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="True"/>
                            <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" UseLayoutRounding="True"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>-->
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource DialogMouseOverBrush}">
                            </Setter>
                            <!--<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>-->
                            <!--<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource ButtonPressedBrush}">
                            </Setter>
                            <!--<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>-->
                            <!--<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF9A9A9A"/>
                            <!--<Setter Property="Background" TargetName="GlyphPanel" Value="#FFEEE9E9"/>
                                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#FFDBD6D6"/>
                                <Setter Property="Fill" TargetName="Glyph" Value="#FF848589"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyMenuSeparatorStyle" TargetType="Separator">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="30,1,5,1" SnapsToDevicePixels="True" UseLayoutRounding="False">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <!--<RowDefinition/>-->
                        </Grid.RowDefinitions>
                        <Rectangle Grid.Row="0" Fill="{DynamicResource MenuSeparatorBrush}" Height="1"/>
                        <!--<Rectangle Grid.Row="1" Fill="White" Height="1"/>-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ValueCellStyle" TargetType="DataGridCell">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground"  Value="{DynamicResource ButtonPressedBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <!--<Rectangle x:Name="rect" Fill="{DynamicResource DialogMainBrush}"/>-->
                    <Border x:Name="Border" BorderThickness="0" Background="{DynamicResource DialogMainBrush}">
                        <ContentPresenter Margin="2" HorizontalAlignment="Left"  VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource DialogMouseOverBrush}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsEditable}" Value="1">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBlueGradientBrush}"></Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KeyCellStyle" TargetType="DataGridCell">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground"  Value="{DynamicResource ButtonPressedBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <!--<Rectangle x:Name="rect" Fill="{DynamicResource DialogMainBrush}"/>-->
                    <Border x:Name="Border" BorderThickness="0" Background="{DynamicResource DialogMainBrush}">
                        <ContentPresenter Margin="2" HorizontalAlignment="Left"  VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource DialogMouseOverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>